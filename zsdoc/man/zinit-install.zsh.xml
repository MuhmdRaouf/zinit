<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<?asciidoc-toc?>
<?asciidoc-numbered?>
<refentry lang="en">
<refentryinfo>
    <title>zinit-install.zsh(1)</title>
</refentryinfo>
<refmeta>
<refentrytitle>zinit-install.zsh</refentrytitle>
<manvolnum>1</manvolnum>
<refmiscinfo class="source">&#160;</refmiscinfo>
<refmiscinfo class="manual">&#160;</refmiscinfo>
</refmeta>
<refnamediv>
    <refname>zinit-install.zsh</refname>
    <refpurpose>a shell script</refpurpose>
</refnamediv>
<refsynopsisdiv id="_synopsis">
<simpara>Documentation automatically generated with &#8216;zshelldoc&#8217;</simpara>
</refsynopsisdiv>
<refsect1 id="_functions">
<title>FUNCTIONS</title>
<literallayout class="monospaced"> zicp
 ziextract
 zimv
 ∞zinit-atclone-hook
 .zinit-at-eval
 ∞zinit-atpull-e-hook
 ∞zinit-atpull-hook
 .zinit-compile-plugin
 ∞zinit-compile-plugin-hook
 .zinit-compinit
 ∞zinit-cp-hook
 .zinit-download-file-stdout
 .zinit-download-snippet
 .zinit-extract
 ∞zinit-extract-hook
 .zinit-forget-completion
 .zinit-get-cygwin-package
 .zinit-get-latest-gh-r-url-part
 .zinit-get-package
 .zinit-get-url-mtime
 .zinit-install-completions
 ∞zinit-make-ee-hook
 ∞zinit-make-e-hook
 ∞zinit-make-hook
 .zinit-mirror-using-svn
 ∞zinit-mv-hook
 .zinit-parse-json
 ∞zinit-ps-on-update-hook
 ∞zinit-reset-hook
 .zinit-setup-plugin-dir
 .zinit-update-snippet
 zpextract
AUTOLOAD compinit</literallayout>
</refsect1>
<refsect1 id="_details">
<title>DETAILS</title>
<refsect2 id="_script_body">
<title>Script Body</title>
<simpara>Has 3 line(s). No functions are called (may set up e.g. a hook, a Zle widget bound to a key, etc.).</simpara>
<simpara>Uses feature(s): <emphasis>source</emphasis></simpara>
</refsect2>
<refsect2 id="_zicp">
<title>zicp</title>
<blockquote>
<literallayout class="monospaced">]]]
FUNCTION zicp [[[</literallayout>
</blockquote>
<simpara>Has 30 line(s). Doesn&#8217;t call other functions.</simpara>
<simpara>Uses feature(s): <emphasis>setopt</emphasis></simpara>
<simpara>Called by:</simpara>
<literallayout class="monospaced">zimv</literallayout>
<simpara><emphasis>Environment variables used:</emphasis> zinit.zsh &#8594; ZPFX</simpara>
</refsect2>
<refsect2 id="_ziextract">
<title>ziextract</title>
<blockquote>
<literallayout class="monospaced">]]]
FUNCTION: ziextract [[[
If the file is an archive, it is extracted by this function.
Next stage is scanning of files with the common utility `file',
to detect executables. They are given +x mode. There are also
messages to the user on performed actions.</literallayout>
<literallayout class="monospaced">$1 - url
$2 - file</literallayout>
</blockquote>
<simpara>Has 293 line(s). Calls functions:</simpara>
<literallayout class="monospaced">ziextract
`-- zinit.zsh/+zinit-message</literallayout>
<simpara>Uses feature(s): <emphasis>setopt</emphasis>, <emphasis>unfunction</emphasis>, <emphasis>zparseopts</emphasis></simpara>
<simpara>Called by:</simpara>
<literallayout class="monospaced">.zinit-extract
.zinit-get-package
.zinit-setup-plugin-dir
zpextract</literallayout>
</refsect2>
<refsect2 id="_zimv">
<title>zimv</title>
<simpara>Has 3 line(s). Calls functions:</simpara>
<literallayout class="monospaced">zimv
`-- zicp</literallayout>
<simpara>Not called by script or any function (may be e.g. a hook, a Zle widget, etc.).</simpara>
</refsect2>
<refsect2 id="_zinit_atclone_hook">
<title>∞zinit-atclone-hook</title>
<blockquote>
<literallayout class="monospaced">]]]
FUNCTION: ∞zinit-atclone-hook [[[</literallayout>
</blockquote>
<simpara>Has 8 line(s). Calls functions:</simpara>
<literallayout class="monospaced">∞zinit-atclone-hook
|-- zinit-side.zsh/.zinit-countdown
`-- zinit.zsh/@zinit-substitute</literallayout>
<simpara>Uses feature(s): <emphasis>eval</emphasis>, <emphasis>setopt</emphasis></simpara>
<simpara>Not called by script or any function (may be e.g. a hook, a Zle widget, etc.).</simpara>
<formalpara><title>zinit-at-eval</title><para>
<screen>____

 ]]]
 FUNCTION: .zinit-at-eval [[[
____

Has 5 line(s). Calls functions:

 .zinit-at-eval
 `-- zinit.zsh/@zinit-substitute

Uses feature(s): _eval_

Called by:

 ∞zinit-atpull-e-hook
 ∞zinit-atpull-hook

∞zinit-atpull-e-hook</screen>
</para></formalpara>
<blockquote>
<literallayout class="monospaced">]]]
FUNCTION: ∞zinit-atpull-e-hook [[[</literallayout>
</blockquote>
<simpara>Has 5 line(s). Calls functions:</simpara>
<literallayout class="monospaced">∞zinit-atpull-e-hook
`-- zinit-side.zsh/.zinit-countdown</literallayout>
<simpara>Uses feature(s): <emphasis>setopt</emphasis></simpara>
<simpara>Not called by script or any function (may be e.g. a hook, a Zle widget, etc.).</simpara>
</refsect2>
<refsect2 id="_zinit_atpull_hook">
<title>∞zinit-atpull-hook</title>
<blockquote>
<literallayout class="monospaced">]]]
FUNCTION: ∞zinit-atpull-hook [[[</literallayout>
</blockquote>
<simpara>Has 5 line(s). Calls functions:</simpara>
<literallayout class="monospaced">∞zinit-atpull-hook
`-- zinit-side.zsh/.zinit-countdown</literallayout>
<simpara>Uses feature(s): <emphasis>setopt</emphasis></simpara>
<simpara>Not called by script or any function (may be e.g. a hook, a Zle widget, etc.).</simpara>
<formalpara><title>zinit-compile-plugin</title><para>
<screen>____

 FUNCTION: .zinit-compile-plugin [[[
 Compiles given plugin (its main source file, and also an
 additional "....zsh" file if it exists).

 $1 - plugin spec (4 formats: user---plugin, user/plugin, user, plugin)
 $2 - plugin (only when $1 - i.e. user - given)
____

Has 87 line(s). Calls functions:

 .zinit-compile-plugin
 |-- zinit-side.zsh/.zinit-compute-ice
 |-- zinit-side.zsh/.zinit-first
 `-- zinit.zsh/+zinit-message

Uses feature(s): _eval_, _setopt_, _zcompile_

Called by:

 ∞zinit-compile-plugin-hook
 zinit-autoload.zsh/.zinit-compile-uncompile-all
 zinit.zsh/zinit

∞zinit-compile-plugin-hook</screen>
</para></formalpara>
<blockquote>
<literallayout class="monospaced">]]]
FUNCTION: ∞zinit-compile-plugin-hook [[[</literallayout>
</blockquote>
<simpara>Has 19 line(s). Calls functions:</simpara>
<literallayout class="monospaced">∞zinit-compile-plugin-hook</literallayout>
<simpara>Uses feature(s): <emphasis>setopt</emphasis></simpara>
<simpara>Not called by script or any function (may be e.g. a hook, a Zle widget, etc.).</simpara>
<formalpara><title>zinit-compinit</title><para>
<screen>____

 FUNCTION: .zinit-compinit [[[
 User-exposed `compinit' frontend which first ensures that all
 completions managed by Zinit are forgotten by Zshell. After
 that it runs normal `compinit', which should more easily detect
 Zinit's completions.

 No arguments.
____

Has 26 line(s). Calls functions:

 .zinit-compinit
 |-- compinit
 `-- zinit.zsh/+zinit-message

Uses feature(s): _autoload_, _compinit_, _setopt_, _unfunction_

Called by:

 .zinit-install-completions
 zinit-autoload.zsh/.zinit-uninstall-completions
 zinit-autoload.zsh/.zinit-update-or-status-all
 zinit.zsh/.zinit-prepare-home
 zinit.zsh/zinit

∞zinit-cp-hook</screen>
</para></formalpara>
<blockquote>
<literallayout class="monospaced">]]]
FUNCTION: ∞zinit-cp-hook [[[</literallayout>
</blockquote>
<simpara>Has 27 line(s). Calls functions:</simpara>
<literallayout class="monospaced">∞zinit-cp-hook
`-- zinit.zsh/@zinit-substitute</literallayout>
<simpara>Uses feature(s): <emphasis>setopt</emphasis></simpara>
<simpara>Not called by script or any function (may be e.g. a hook, a Zle widget, etc.).</simpara>
<formalpara><title>zinit-download-file-stdout</title><para>
<screen>____

 FUNCTION: .zinit-download-file-stdout [[[
 Downloads file to stdout. Supports following backend commands:
 curl, wget, lftp, lynx. Used by snippet loading.
____

Has 48 line(s). Calls functions:

 .zinit-download-file-stdout
 `-- zinit.zsh/+zinit-message

Uses feature(s): _setopt_, _trap_, _type_

Called by:

 .zinit-download-snippet
 .zinit-get-cygwin-package
 .zinit-get-package
 .zinit-setup-plugin-dir

.zinit-download-snippet</screen>
</para></formalpara>
<blockquote>
<literallayout class="monospaced">FUNCTION: .zinit-download-snippet [[[
Downloads snippet – either a file – with curl, wget, lftp or lynx,
or a directory, with Subversion – when svn-ICE is active. Github
supports Subversion protocol and allows to clone subdirectories.
This is used to provide a layer of support for Oh-My-Zsh and Prezto.</literallayout>
</blockquote>
<simpara>Has 323 line(s). Calls functions:</simpara>
<literallayout class="monospaced">.zinit-download-snippet
|-- zinit-side.zsh/.zinit-store-ices
`-- zinit.zsh/+zinit-message</literallayout>
<simpara>Uses feature(s): <emphasis>setopt</emphasis>, <emphasis>trap</emphasis>, <emphasis>zcompile</emphasis></simpara>
<simpara>Called by:</simpara>
<literallayout class="monospaced">.zinit-update-snippet
zinit.zsh/.zinit-load-snippet</literallayout>
<formalpara><title>zinit-extract</title><para>
<screen>____

 ]]]
 FUNCTION: .zinit-extract() [[[
____

Has 30 line(s). Calls functions:

 .zinit-extract
 |-- ziextract
 |   `-- zinit.zsh/+zinit-message
 `-- zinit.zsh/+zinit-message

Uses feature(s): _setopt_

Called by:

 ∞zinit-extract-hook

∞zinit-extract-hook</screen>
</para></formalpara>
<blockquote>
<literallayout class="monospaced">]]]
FUNCTION: ∞zinit-extract-hook [[[</literallayout>
</blockquote>
<simpara>Has 8 line(s). Calls functions:</simpara>
<literallayout class="monospaced">∞zinit-extract-hook
`-- zinit.zsh/@zinit-substitute</literallayout>
<simpara>Not called by script or any function (may be e.g. a hook, a Zle widget, etc.).</simpara>
<formalpara><title>zinit-forget-completion</title><para>
<screen>____

 ]]]
 FUNCTION: .zinit-forget-completion [[[
 Implements alternation of Zsh state so that already initialized
 completion stops being visible to Zsh.

 $1 - completion function name, e.g. "_cp"; can also be "cp"
____

Has 20 line(s). Doesn't call other functions.

Uses feature(s): _setopt_, _unfunction_

Called by:

 .zinit-compinit
 .zinit-install-completions
 zinit-autoload.zsh/.zinit-uninstall-completions
 zinit.zsh/zinit

.zinit-get-cygwin-package</screen>
</para></formalpara>
<blockquote>
<literallayout class="monospaced">]]]
FUNCTION: .zinit-get-cygwin-package [[[</literallayout>
</blockquote>
<simpara>Has 70 line(s). Calls functions:</simpara>
<literallayout class="monospaced">.zinit-get-cygwin-package
`-- zinit.zsh/+zinit-message</literallayout>
<simpara>Uses feature(s): <emphasis>setopt</emphasis></simpara>
<simpara>Called by:</simpara>
<literallayout class="monospaced">.zinit-setup-plugin-dir</literallayout>
<formalpara><title>zinit-get-latest-gh-r-url-part</title><para>
<screen>____

 ]]]
 FUNCTION: .zinit-get-latest-gh-r-url-part [[[
 Gets version string of latest release of given Github
 package. Connects to Github releases page.
____

Has 103 line(s). Calls functions:

 .zinit-get-latest-gh-r-url-part
 `-- zinit.zsh/+zinit-message

Uses feature(s): _setopt_

Called by:

 .zinit-setup-plugin-dir
 zinit-autoload.zsh/.zinit-update-or-status

.zinit-get-package</screen>
</para></formalpara>
<blockquote>
<literallayout class="monospaced">]]]
FUNCTION: .zinit-get-package [[[</literallayout>
</blockquote>
<simpara>Has 196 line(s). Calls functions:</simpara>
<literallayout class="monospaced">.zinit-get-package
|-- ziextract
|   `-- zinit.zsh/+zinit-message
|-- zinit.zsh/+zinit-message
`-- zinit.zsh/@zinit-substitute</literallayout>
<simpara>Uses feature(s): <emphasis>eval</emphasis>, <emphasis>setopt</emphasis>, <emphasis>trap</emphasis></simpara>
<simpara>Called by:</simpara>
<literallayout class="monospaced">zinit.zsh/.zinit-load</literallayout>
<simpara><emphasis>Environment variables used:</emphasis> zinit.zsh &#8594; ZPFX</simpara>
<formalpara><title>zinit-get-url-mtime</title><para>
<screen>____

 FUNCTION: .zinit-get-url-mtime [[[
 For the given URL returns the date in the Last-Modified
 header as a time stamp
____

Has 35 line(s). Doesn't call other functions.

Uses feature(s): _read_, _setopt_, _trap_, _type_

Called by:

 .zinit-download-snippet

.zinit-install-completions</screen>
</para></formalpara>
<blockquote>
<literallayout class="monospaced">FUNCTION: .zinit-install-completions [[[
Installs all completions of given plugin. After that they are
visible to `compinit'. Visible completions can be selectively
disabled and enabled. User can access completion data with
`clist' or `completions' subcommand.</literallayout>
<literallayout class="monospaced">$1 - plugin spec (4 formats: user---plugin, user/plugin, user, plugin)
$2 - plugin (only when $1 - i.e. user - given)
$3 - if 1, then reinstall, otherwise only install completions that aren't there</literallayout>
</blockquote>
<simpara>Has 61 line(s). Calls functions:</simpara>
<literallayout class="monospaced">.zinit-install-completions
|-- zinit-side.zsh/.zinit-any-colorify-as-uspl2
|-- zinit-side.zsh/.zinit-exists-physically-message
|-- zinit.zsh/.zinit-any-to-user-plugin
`-- zinit.zsh/+zinit-message</literallayout>
<simpara>Uses feature(s): <emphasis>setopt</emphasis></simpara>
<simpara>Called by:</simpara>
<literallayout class="monospaced">.zinit-download-snippet
.zinit-setup-plugin-dir
zinit.zsh/zinit</literallayout>
</refsect2>
<refsect2 id="_zinit_make_ee_hook">
<title>∞zinit-make-ee-hook</title>
<blockquote>
<literallayout class="monospaced">]]]
FUNCTION: ∞zinit-make-ee-hook [[[</literallayout>
</blockquote>
<simpara>Has 9 line(s). Calls functions:</simpara>
<literallayout class="monospaced">∞zinit-make-ee-hook
|-- zinit-side.zsh/.zinit-countdown
`-- zinit.zsh/@zinit-substitute</literallayout>
<simpara>Not called by script or any function (may be e.g. a hook, a Zle widget, etc.).</simpara>
</refsect2>
<refsect2 id="_zinit_make_e_hook">
<title>∞zinit-make-e-hook</title>
<blockquote>
<literallayout class="monospaced">]]]
FUNCTION: ∞zinit-make-e-hook [[[</literallayout>
</blockquote>
<simpara>Has 9 line(s). Calls functions:</simpara>
<literallayout class="monospaced">∞zinit-make-e-hook
|-- zinit-side.zsh/.zinit-countdown
`-- zinit.zsh/@zinit-substitute</literallayout>
<simpara>Not called by script or any function (may be e.g. a hook, a Zle widget, etc.).</simpara>
</refsect2>
<refsect2 id="_zinit_make_hook">
<title>∞zinit-make-hook</title>
<blockquote>
<literallayout class="monospaced">]]]
FUNCTION: ∞zinit-make-hook [[[</literallayout>
</blockquote>
<simpara>Has 10 line(s). Calls functions:</simpara>
<literallayout class="monospaced">∞zinit-make-hook
|-- zinit-side.zsh/.zinit-countdown
`-- zinit.zsh/@zinit-substitute</literallayout>
<simpara>Not called by script or any function (may be e.g. a hook, a Zle widget, etc.).</simpara>
<formalpara><title>zinit-mirror-using-svn</title><para>
<screen>____

 FUNCTION: .zinit-mirror-using-svn [[[
 Used to clone subdirectories from Github. If in update mode
 (see $2), then invokes `svn update', in normal mode invokes
 `svn checkout --non-interactive -q <URL>'. In test mode only
 compares remote and local revision and outputs true if update
 is needed.

 $1 - URL
 $2 - mode, "" - normal, "-u" - update, "-t" - test
 $3 - subdirectory (not path) with working copy, needed for -t and -u
____

Has 29 line(s). Doesn't call other functions.

Uses feature(s): _setopt_

Called by:

 .zinit-download-snippet

∞zinit-mv-hook</screen>
</para></formalpara>
<blockquote>
<literallayout class="monospaced">]]]
FUNCTION: ∞zinit-mv-hook [[[</literallayout>
</blockquote>
<simpara>Has 27 line(s). Calls functions:</simpara>
<literallayout class="monospaced">∞zinit-mv-hook
`-- zinit.zsh/@zinit-substitute</literallayout>
<simpara>Uses feature(s): <emphasis>setopt</emphasis></simpara>
<simpara>Not called by script or any function (may be e.g. a hook, a Zle widget, etc.).</simpara>
<formalpara><title>zinit-parse-json</title><para>
<screen>____

 FUNCTION: .zinit-parse-json [[[
 Retrievies the ice-list from given profile from
 the JSON of the package.json.
____

Has 107 line(s). Calls functions:

 .zinit-parse-json

Uses feature(s): _setopt_

Called by:

 .zinit-get-package

∞zinit-ps-on-update-hook</screen>
</para></formalpara>
<blockquote>
<literallayout class="monospaced">]]]
FUNCTION: ∞zinit-ps-on-update-hook [[[</literallayout>
</blockquote>
<simpara>Has 18 line(s). Calls functions:</simpara>
<literallayout class="monospaced">∞zinit-ps-on-update-hook
`-- zinit.zsh/+zinit-message</literallayout>
<simpara>Uses feature(s): <emphasis>eval</emphasis></simpara>
<simpara>Not called by script or any function (may be e.g. a hook, a Zle widget, etc.).</simpara>
</refsect2>
<refsect2 id="_zinit_reset_hook">
<title>∞zinit-reset-hook</title>
<blockquote>
<literallayout class="monospaced">]]]
FUNCTION: ∞zinit-reset-opt-hook [[[</literallayout>
</blockquote>
<simpara>Has 79 line(s). Calls functions:</simpara>
<literallayout class="monospaced">∞zinit-reset-hook
`-- zinit.zsh/+zinit-message</literallayout>
<simpara>Uses feature(s): <emphasis>eval</emphasis></simpara>
<simpara>Not called by script or any function (may be e.g. a hook, a Zle widget, etc.).</simpara>
<formalpara><title>zinit-setup-plugin-dir</title><para>
<screen>____

 ]]]
 FUNCTION: .zinit-setup-plugin-dir [[[
 Clones given plugin into PLUGIN_DIR. Supports multiple
 sites (respecting `from' and `proto' ice modifiers).
 Invokes compilation of plugin's main file.

 $1 - user
 $2 - plugin
____

Has 198 line(s). Calls functions:

 .zinit-setup-plugin-dir
 |-- ziextract
 |   `-- zinit.zsh/+zinit-message
 |-- zinit-side.zsh/.zinit-any-colorify-as-uspl2
 |-- zinit-side.zsh/.zinit-store-ices
 |-- zinit.zsh/.zinit-get-object-path
 `-- zinit.zsh/+zinit-message

Uses feature(s): _setopt_, _trap_

Called by:

 zinit-autoload.zsh/.zinit-update-or-status
 zinit.zsh/.zinit-load

.zinit-update-snippet</screen>
</para></formalpara>
<blockquote>
<literallayout class="monospaced">]]]
FUNCTION: .zinit-update-snippet [[[</literallayout>
</blockquote>
<simpara>Has 76 line(s). Calls functions:</simpara>
<literallayout class="monospaced">.zinit-update-snippet
|-- zinit.zsh/.zinit-get-object-path
|-- zinit.zsh/+zinit-message
`-- zinit.zsh/.zinit-pack-ice</literallayout>
<simpara>Uses feature(s): <emphasis>eval</emphasis>, <emphasis>setopt</emphasis></simpara>
<simpara>Called by:</simpara>
<literallayout class="monospaced">zinit-autoload.zsh/.zinit-update-or-status-snippet</literallayout>
</refsect2>
<refsect2 id="_zpextract">
<title>zpextract</title>
<blockquote>
<literallayout class="monospaced">]]]
FUNCTION: zpextract [[[</literallayout>
</blockquote>
<simpara>Has 1 line(s). Calls functions:</simpara>
<literallayout class="monospaced">zpextract
`-- ziextract
    `-- zinit.zsh/+zinit-message</literallayout>
<simpara>Not called by script or any function (may be e.g. a hook, a Zle widget, etc.).</simpara>
</refsect2>
<refsect2 id="_compinit">
<title>compinit</title>
<blockquote>
<literallayout class="monospaced">Initialisation for new style completion. This mainly contains some helper
functions and setup. Everything else is split into different files that
will automatically be made autoloaded (see the end of this file).  The
names of the files that will be considered for autoloading are those that
begin with an underscores (like `_condition).</literallayout>
<literallayout class="monospaced">The first line of each of these files is read and must indicate what
should be done with its contents:</literallayout>
<literallayout class="monospaced">`#compdef &lt;names ...&gt;'</literallayout>
</blockquote>
<simpara>Has 549 line(s). Doesn&#8217;t call other functions.</simpara>
<simpara>Uses feature(s): <emphasis>autoload</emphasis>, <emphasis>bindkey</emphasis>, <emphasis>compdef</emphasis>, <emphasis>compdump</emphasis>, <emphasis>eval</emphasis>, <emphasis>read</emphasis>, <emphasis>setopt</emphasis>, <emphasis>unfunction</emphasis>, <emphasis>zle</emphasis>, <emphasis>zstyle</emphasis></simpara>
<simpara>Called by:</simpara>
<literallayout class="monospaced">.zinit-compinit</literallayout>
</refsect2>
</refsect1>
</refentry>
